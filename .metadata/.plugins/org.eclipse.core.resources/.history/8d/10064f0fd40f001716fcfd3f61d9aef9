package harrypotter.model.tournament;

import harrypotter.model.character.*;
import harrypotter.model.magic.*;
import harrypotter.model.world.*;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;


//import javafx.scene.control.Cell;



//A class representing a tournament task. 

public abstract class Task {
	private Random randomGenerator;
	
	private ArrayList<Champion> champions;
	//Represents the champions competing in this task.
	
	private Champion currentChamp;
	//Represents the champion whose turn it currently is in this task.
	
	private Cell[][] map;
	//A 2D array representing the map that the task is taking place in.
	
	private int allowedMoves;
	//Indicates the number of moves allowed for the currentchamp in the current turn.
	
	private boolean traitActivated;
	//Indicates whether the currentchamp's trait is activated in the current turn or not.
	
	private ArrayList<Potion> potions;
	//List of potions available to be distributed in the maps of the three tasks.
	
	public Task(ArrayList<Champion> champions)  throws IOException{
		this.champions=champions;
		allowedMoves=1;
		traitActivated= false;
		map = new Cell[10][10];
		this.potions = new ArrayList <Potion>();
		loadPotions("Potions.csv");
		generateMap();
		
		// resets the health points, intelligence points, traitcooldown, spells for the next Task
		for(Champion champion: this.champions)
		{
			((Wizard)champion).setHp(((Wizard)champion).getDefaultHp());
			((Wizard)champion).setIp(((Wizard)champion).getDefaultIp());
			((Wizard)champion).setTraitCooldown(0);
			ArrayList<Spell> spells = ((Wizard)champion).getSpells();
			// sets all the spells for the champion
			for(Spell spell : spells)
			{
				spell.setCoolDown(0);
			}

		}
	}
	public void setTraitActivated(boolean traitActivated)
	{
		this.traitActivated = traitActivated;
	}
	public ArrayList<Champion> getChampions(){
		return champions;
	}
	
	public Champion getCurrentChamp(){
		return currentChamp;
	}
	
	public void setCurrentChamp(Champion currentChamp){
		this.currentChamp=currentChamp;
	}
	
	public Cell[][] getMap(){
		return map;
	}
	
	public int getAllowedMoves(){
		return allowedMoves;
	}
	
	public void setAllowedMoves(int allowedMoves){
		this.allowedMoves=allowedMoves;
	}
	
	public boolean isTraitActivated(){
		return traitActivated;
	}
	
	public void setTaitActivated(boolean traitActivated){
		this.traitActivated=traitActivated;
	}
	
	public ArrayList<Potion> getPotions(){
		return potions;
	}
	
	//loading the potions from the csv file.
	private void loadPotions(String filePath) throws IOException{
		String currentLine = "";
		FileReader fileReader= new FileReader(filePath);
		BufferedReader br = new BufferedReader(fileReader);
		while ((currentLine = br.readLine()) != null) {
			String [] potion= currentLine.split(",");
			potions.add(new Potion(potion[0],Integer.parseInt(potion[1])));
		}
		br.close();

	}
	

	// adding players.
	void addplayers(){
		if (champions.size()>0){
			map[9][0]= new ChampionCell(this.champions.get(0));
			((Wizard) champions.get(0)).setLocation(new Point(9, 0));}
		if (champions.size()>1){
			map[9][9]= new ChampionCell(this.champions.get(1));
			((Wizard) champions.get(1)).setLocation(new Point(9, 9));}
		if (champions.size()>2){
			map[0][9]= new ChampionCell(this.champions.get(2));
			((Wizard) champions.get(2)).setLocation(new Point(0, 9));}
		if (champions.size()>3){
			map[0][0]= new ChampionCell(this.champions.get(3));
			((Wizard) champions.get(3)).setLocation(new Point(0, 0));}
		
	}	

	//adding potions method.
	void addingpotions(){
		for (int i=0; i<10;i++){
			randomGenerator = new Random();
			int x=randomGenerator.nextInt(10);
			int y=randomGenerator.nextInt(10);
			if (this.map[x][y]!=null)
				i--;
			else{
				int index =randomGenerator.nextInt(potions.size());
				map[x][y]= new CollectibleCell(potions.get(index));
			}
		
		}
	}
	
	//properties of task 1.
	void task1(){
		randomGenerator = new Random();
		
		for (int i=0; i<40;i++){
			int x=randomGenerator.nextInt(10);
			int y=randomGenerator.nextInt(10);
			this.map[4][4]=new EmptyCell();
			if (this.map[x][y]!=null||(x==4&&y==4))
				i--;
			else{
				map[x][y]= new ObstacleCell(new PhysicalObstacle(randomGenerator.nextInt(101)+200));
			}
		
		}
		for (int i=0; i<10;i++){
			int x=randomGenerator.nextInt(10);
			int y=randomGenerator.nextInt(10);
			if (this.map[x][y]!=null||(x==4&&y==4))
				i--;
			else{
				int index =randomGenerator.nextInt(potions.size());
				map[x][y]= new CollectibleCell(potions.get(index));
			}
		
		}
		for (int i = 0; i < 10; i++)
		   {
			for (int j = 0; j < 10; j++)
		      { if (map[i][j]==null)
		    	  map[i][j]=new EmptyCell();
				
		      }
		   }	
	
	}
	
	//properties of task 2.
	void task2(){

		
		for (int i=0;i<champions.size();i++){
			randomGenerator = new Random();
			int x=randomGenerator.nextInt(10);
			int y=randomGenerator.nextInt(10);
			if (this.map[x][y]!=null)
				i--;
			else{
				map[x][y]= new TreasureCell(champions.get(i));
			}
		}
		for (int i=0; i<40;i++){
			randomGenerator = new Random();
			int x=randomGenerator.nextInt(10);
			int y=randomGenerator.nextInt(10);
			if (this.map[x][y]!=null)
				i--;
			else{
				map[x][y]=new ObstacleCell( new Merperson(randomGenerator.nextInt(101)+200, randomGenerator.nextInt(201)+100));
			}
		
		}
		for (int i = 0; i < 10; i++)
		   {
			for (int j = 0; j < 10; j++)
		      { if (map[i][j]==null)
		    	  map[i][j]=new EmptyCell();
				
		      }
		   }	
	
		
	}
	
	
	public abstract void generateMap() throws IOException;
	
	/*
	 * performs the steps needed for finalizing any action i.e. move performed by the currentChamp.
	 */
	public void finalizeAction()
	{
		// the location of the current champion
		Point p = ((Wizard) this.currentChamp).getLocation();
		Wizard temp =(Wizard) currentChamp;
		if(this instanceof FirstTask)
		{
			// we have a winner
			if(p.x == 4 && p.y == 4)
			{
				map[4][4] = new EmptyCell();
				champions.remove(currentChamp);
				ArrayList<Champion> win = ((FirstTask)this).getWinners();
			}
			
		}
	}
	
	/*
	 * This method is responsible for returning the Point of the cell adjacent to the currentChamp’s location in the targeted direction d.
	 */
	Point getTargetPoint(Direction d)
	{
		// the location of the current champ
		Point p =((Wizard)this.currentChamp).getLocation();
		
		// adds 1 to the Y-coord
		if(d == Direction.FORWARD)
		{
			p.y = (int) (p.getY() + 1) ;
			return p;
		}
		// removes 1 from the Y-coord
		else if(d == Direction.BACKWARD)
		{
			p.y = (int) (p.getY() - 1) ; 
			return p;
		}
		// adds 1 to the X-coord
		else if(d == Direction.RIGHT)
		{
			p.x = (int) (p.getX() + 1) ; 
			return p;
		}
		// removes 1 from the X-coord
		else if(d == Direction.LEFT)
		{
			p.x = (int) (p.getX() - 1) ;
			return p;
		}
		else
		{
			return p;
		}
			
	}
	
	/*
	 * method is responsible for casting a DamagingSpell to the currentChamp’s adjacent cell in the target direction d
	 */
	public void castDamagingSpell(DamagingSpell s, Direction d)
	{
		// gets the target of the damaging spell 
		Point p = getTargetPoint(d);
		
		// the cell at which the attack was made
		Cell targetedCell = map[p.x][p.y];
		
		// a player was standing in the attacked cell
		if(targetedCell instanceof ChampionCell)
		{
			Champion target = ((ChampionCell) targetedCell).getChamp();
			// the Champion was a HufflepuffWizard in the third task
			if((this instanceof ThirdTask) && (target instanceof HufflepuffWizard))
			{
				((Wizard) target).setHp(((Wizard) target).getHp() - (s.getDamageAmount() / 2));
			}
			else
			{
				// otherwise
				((Wizard) target).setHp(((Wizard) target).getHp() - s.getDamageAmount());
			}
		}
		// an obstacle
		else if(targetedCell instanceof ObstacleCell)
		{
			Champion target = ((ChampionCell) targetedCell).getChamp();
			
			((Wizard) target).setHp(((Wizard) target).getHp() - s.getDamageAmount());

		}
	}
	
	/*
	 * This is responsible for casting a HealingSpell to restore the hp of the currentChamp with the healing amount of the spell.
	 */
	public void castHealingSpell(HealingSpell s)
	{
		// values
		int hp = ((Wizard)this.currentChamp).getHp();
		int defaulthp = ((Wizard)this.currentChamp).getDefaultHp();
		int heal = s.getHealingAmount();
		// The healing amount was less or equal to the defualthp
		if(defaulthp >= hp + heal)
		{
			((Wizard)this.currentChamp).setHp(hp+heal);
		}
		else
		{
			((Wizard)this.currentChamp).setHp(defaulthp);
		}
	}
	/*
	 * responsible for activating the Gryffindor trait.
	 */
	void onGryffindorTrait()
	{	
		// iterates over all the cells in the map	
		for(int i = 0, n = map.length; i < n; i++)
		{
			for(Cell cell : map[i])
			{
				// if the cell has a champion
				if(cell instanceof ChampionCell)
				{
					Champion champ = ((ChampionCell) cell).getChamp();
					// the champion was a gryffindor wizard
					if(champ instanceof GryffindorWizard)
					{
						// it was the first task 
						if(this instanceof FirstTask)
						{
							((Wizard) champ).setTraitCooldown(0);//uhk
						}
							
					}
					
				}
			}
		}
	}

}


