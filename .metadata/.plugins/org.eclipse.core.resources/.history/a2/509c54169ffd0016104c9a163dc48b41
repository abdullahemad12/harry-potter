package harrypotter.model.tournament;

import harrypotter.model.character.Champion;
import harrypotter.model.magic.Potion;
import harrypotter.model.world.ChampionCell;
import harrypotter.model.world.Cell;
import harrypotter.model.world.CollectibleCell;
import harrypotter.model.world.ObstacleCell;
import harrypotter.model.world.PhysicalObstacle;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;


//import javafx.scene.control.Cell;



//A class representing a tournament task. 

public abstract class Task {
	private Random randomGenerator;
	
	private ArrayList<Champion> champions;
	//Represents the champions competing in this task.
	
	private Champion currentChamp;
	//Represents the champion whose turn it currently is in this task.
	
	private Cell[][] map;
	//A 2D array representing the map that the task is taking place in.
	
	private int allowedMoves;
	//Indicates the number of moves allowed for the currentchamp in the current turn.
	
	private boolean traitActivated;
	//Indicates whether the currentchamp's trait is activated in the current turn or not.
	
	private ArrayList<Potion> potions;
	//List of potions available to be distributed in the maps of the three tasks.
	
	public Task(ArrayList<Champion> champions) throws IOException{
		this.champions=champions;
		allowedMoves=1;
		traitActivated= false;
		map = new Cell[10][10];
		this.loadPotions("Potions.csv");
	}
	
	public ArrayList<Champion> getChampions(){
		return champions;
	}
	
	public Champion getCurrentChamp(){
		return currentChamp;
	}
	
	public void setCurrentChamp(Champion currentChamp){
		this.currentChamp=currentChamp;
	}
	
	public Cell[][] getMap(){
		return map;
	}
	
	public int getAllowedMoves(){
		return allowedMoves;
	}
	
	public void setAllowedMoves(int allowedMoves){
		this.allowedMoves=allowedMoves;
	}
	
	public boolean isTaitActivated(){
		return traitActivated;
	}
	
	public void setTaitActivated(boolean traitActivated){
		this.traitActivated=traitActivated;
	}
	
	public ArrayList<Potion> getPotions(){
		return potions;
	}
	
	//loading the potions from the csv file.
	private void loadPotions(String filePath) throws IOException{
		String currentLine = "";
		FileReader fileReader= new FileReader(filePath);
		BufferedReader br = new BufferedReader(fileReader);
		while ((currentLine = br.readLine()) != null) {
			String [] potion= currentLine.split(",");
			this.potions.add(new Potion(potion[0],Integer.parseInt(potion[1])));
		}

	}
	public void generateMap(){
		// adding players.
		if (champions.size()>0)
			map[0][9]= new ChampionCell(this.champions.get(0));
		if (champions.size()>1)
			map[9][9]= new ChampionCell(this.champions.get(1));
		if (champions.size()>2)
			map[9][0]= new ChampionCell(this.champions.get(2));
		if (champions.size()>3)
			map[0][0]= new ChampionCell(this.champions.get(3));
		
		
		}
	
	void addingpotions(){
		for (int j=0; j<10;j++){
			randomGenerator = new Random();
			int xx=randomGenerator.nextInt(10);
			int yy=randomGenerator.nextInt(10);
			if (this.map[xx][yy]!=null||(xx==4&&yy==4))
				j--;
			else{
				int index =randomGenerator.nextInt(potions.size());
				map[xx][yy]= new CollectibleCell(potions.get(index));
			}
		
		}
	}
	
	
	void task1(){
		for (int j=0; j<10;j++){
			randomGenerator = new Random();
			int xx=randomGenerator.nextInt(10);
			int yy=randomGenerator.nextInt(10);
			if (this.map[xx][yy]!=null||(xx==4&&yy==4))
				j--;
			else{
				int index =randomGenerator.nextInt(potions.size());
				map[xx][yy]= new CollectibleCell(potions.get(index));
			}
		
		}
		for (int i=0; i<40;i++){
			randomGenerator = new Random();
			int x=randomGenerator.nextInt(10);
			int y=randomGenerator.nextInt(10);
			if (this.map[x][y]!=null||(x==4&&y==4))
				i--;
			else{
				map[x][y]= new ObstacleCell(new PhysicalObstacle(randomGenerator.nextInt(101)+200));
			}
		
		}
	
	}
	
	
	
}
