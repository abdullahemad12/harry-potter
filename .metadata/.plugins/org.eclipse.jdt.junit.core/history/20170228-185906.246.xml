<?xml version="1.0" encoding="UTF-8"?><testrun name="M1PublicTests" project="harrypotter" tests="123" started="123" failures="1" errors="25" ignored="0">
  <testsuite name="harrypotter.tests.M1PublicTests" time="46.563">
    <testcase name="testConstructorTask" classname="harrypotter.tests.M1PublicTests" time="0.021"/>
    <testcase name="testConstructorChampionCellInitialization" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testInstanceVariableWizardSpellsSetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableTaskChampionsSetter" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testConstructorRavenclawWizard" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testFirstTaskMapObstacleHPRange" classname="harrypotter.tests.M1PublicTests" time="5.047">
      <error>java.lang.Exception: test timed out after 5000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at harrypotter.tests.M1PublicTests.testFirstTaskMapObstacleHPRange(M1PublicTests.java:679)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableSpellDefaultCooldownGetter" classname="harrypotter.tests.M1PublicTests" time="0.005"/>
    <testcase name="testInstanceVariableSpellCoolDownSetter" classname="harrypotter.tests.M1PublicTests" time="0.008"/>
    <testcase name="testInstanceVariableTaskChampions" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableCollectibleSetter" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testInstanceVariableChampionCellGetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableTaskAllowedMoves" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testMethodInInterfaceChampion" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testClassIsSubClassSlytherinWizard" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testClassIsSubClassThirdTask" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testConstructorSecondTaskInitialization" classname="harrypotter.tests.M1PublicTests" time="0.101">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)&#13;
	at java.lang.reflect.Constructor.newInstance(Constructor.java:408)&#13;
	at harrypotter.tests.M1PublicTests.testConstructorSecondTaskInitialization(M1PublicTests.java:341)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableSpellDefaultCooldownSetter" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testLoadedPotions" classname="harrypotter.tests.M1PublicTests" time="1.0">
      <error>java.lang.Exception: test timed out after 1000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at harrypotter.tests.M1PublicTests.testLoadedPotions(M1PublicTests.java:1250)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableRelocatingSpellRangeGetter" classname="harrypotter.tests.M1PublicTests" time="0.005"/>
    <testcase name="testMethodInInterfaceMethodUseTrait" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testConstructorRelocatingSpellInitialization" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableChampionCellSetter" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableRelocatingSpellRange" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testInstanceVariablesRelocatingSpellInherited" classname="harrypotter.tests.M1PublicTests" time="0.005"/>
    <testcase name="testFirstConstructorGryffindorWizardInitialization" classname="harrypotter.tests.M1PublicTests" time="0.005"/>
    <testcase name="testInstanceVariableRelocatingSpellRangeSetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testConstructorSpell" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testClassIsAbstractCell" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testClassIsAbstractTask" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testMethodreadMapInThirdTask" classname="harrypotter.tests.M1PublicTests" time="0.101">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testMethodExistsInClass(M1PublicTests.java:2051)&#13;
	at harrypotter.tests.M1PublicTests.testMethodreadMapInThirdTask(M1PublicTests.java:1402)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassIsAbstractObstacle" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testMethodInSlytherinWizardTrait" classname="harrypotter.tests.M1PublicTests" time="0.101">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testMethodExistsInClass(M1PublicTests.java:2014)&#13;
	at harrypotter.tests.M1PublicTests.testMethodInSlytherinWizardTrait(M1PublicTests.java:1381)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableTaskCurrentChampGetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableObstacleGetter" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testInstanceVariableTournamentChampions" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testFirstTaskMapChampionCount" classname="harrypotter.tests.M1PublicTests" time="1.001">
      <error>java.lang.Exception: test timed out after 1000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at harrypotter.tests.M1PublicTests.testFirstTaskMapChampionCount(M1PublicTests.java:587)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableTournamentChampionsGetter" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testSecondTaskMerpersonDmgHpRange" classname="harrypotter.tests.M1PublicTests" time="5.001">
      <error>java.lang.Exception: test timed out after 5000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at harrypotter.tests.M1PublicTests.testSecondTaskMerpersonDmgHpRange(M1PublicTests.java:1699)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testFirstConstructorHufflepuffWizardInitialization" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testInstanceVariableSpellCost" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableSpellName" classname="harrypotter.tests.M1PublicTests" time="0.009"/>
    <testcase name="testSecondTaskMapTreasureCount" classname="harrypotter.tests.M1PublicTests" time="2.001">
      <error>java.lang.Exception: test timed out after 2000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at harrypotter.tests.M1PublicTests.testSecondTaskMapTreasureCount(M1PublicTests.java:1665)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassIsAbstractSpell" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testInstanceVariableObstacleCell" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testConstructorRelocatingSpell" classname="harrypotter.tests.M1PublicTests" time="0.017"/>
    <testcase name="testInstanceVariableWizardHp" classname="harrypotter.tests.M1PublicTests" time="0.009"/>
    <testcase name="testInstanceVariableWizardIp" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testInstanceVariableTaskCurrentChampSetter" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testInstanceVariableObstacleSetter" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testInstanceVariableTournamentChampionsSetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testClassImplementsInterfaceHufflepuffWizard" classname="harrypotter.tests.M1PublicTests" time="0.101">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testClassImplementsInterface(M1PublicTests.java:2119)&#13;
	at harrypotter.tests.M1PublicTests.testClassImplementsInterfaceHufflepuffWizard(M1PublicTests.java:30)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableWizardName" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testClassIsAbstractCollectible" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testConstructorFirstTaskInitialization" classname="harrypotter.tests.M1PublicTests" time="0.102">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)&#13;
	at java.lang.reflect.Constructor.newInstance(Constructor.java:408)&#13;
	at harrypotter.tests.M1PublicTests.testConstructorFirstTaskInitialization(M1PublicTests.java:151)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableTaskTraitActivatedGetter" classname="harrypotter.tests.M1PublicTests" time="0.101">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testGetterMethodExistsInClass(M1PublicTests.java:1966)&#13;
	at harrypotter.tests.M1PublicTests.testInstanceVariableTaskTraitActivatedGetter(M1PublicTests.java:1093)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableTaskCurrentChamp" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testSecondTaskMapObstacleCount" classname="harrypotter.tests.M1PublicTests" time="2.0">
      <error>java.lang.Exception: test timed out after 2000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at harrypotter.tests.M1PublicTests.testSecondTaskMapObstacleCount(M1PublicTests.java:1496)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassIsSubClassMerpersonObstacle" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableWizardInventoryGetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testClassIsSubClassRavenclawWizard" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testConstructorPhysicalObstacleInitialization" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testConstructorObstacleCell" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableTaskMap" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableTaskTraitActivated" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testClassIsAbstractWizard" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableTaskTraitActivatedSetter" classname="harrypotter.tests.M1PublicTests" time="0.1">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testSetterMethodExistsInClass(M1PublicTests.java:1981)&#13;
	at harrypotter.tests.M1PublicTests.testInstanceVariableTaskTraitActivatedSetter(M1PublicTests.java:1099)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testMethodLoadSpellsInTournament" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableTournamentSpellsGetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testSecondTaskMapPotionRandomlyChosen" classname="harrypotter.tests.M1PublicTests" time="5.001">
      <error>java.lang.Exception: test timed out after 5000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at harrypotter.tests.M1PublicTests.testSecondTaskMapPotionRandomlyChosen(M1PublicTests.java:1535)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testSecondTaskMapTreasureCorrectlyAssigned" classname="harrypotter.tests.M1PublicTests" time="2.001">
      <error>java.lang.Exception: test timed out after 2000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at harrypotter.tests.M1PublicTests.testSecondTaskMapTreasureCorrectlyAssigned(M1PublicTests.java:1607)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableChampionCell" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testInstanceVariableWizardInventorySetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testConstructorSlytherinWizard" classname="harrypotter.tests.M1PublicTests" time="0.017"/>
    <testcase name="testMethodInRavenclawWizardTrait" classname="harrypotter.tests.M1PublicTests" time="0.099">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testMethodExistsInClass(M1PublicTests.java:2014)&#13;
	at harrypotter.tests.M1PublicTests.testMethodInRavenclawWizardTrait(M1PublicTests.java:1375)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableTaskAllowedMovesGetter" classname="harrypotter.tests.M1PublicTests" time="0.016"/>
    <testcase name="testConstructorObstacleCellInitialization" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableWizardLocationGetter" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testFirstTaskMapPotionCount" classname="harrypotter.tests.M1PublicTests" time="2.001">
      <error>java.lang.Exception: test timed out after 2000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at harrypotter.tests.M1PublicTests.testFirstTaskMapPotionCount(M1PublicTests.java:721)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testEnumDirection" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableTournamentSpellsSetter" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableWizardTraitCooldownGetter" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableTaskPotionsSetter" classname="harrypotter.tests.M1PublicTests" time="0.015"/>
    <testcase name="testInstanceVariableHpObstacleGetter" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testMethodLoadPotionsInTask" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariablesThirdTaskInherited" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableTaskAllowedMovesSetter" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testFirstTaskMapPotionRandomlyChosen" classname="harrypotter.tests.M1PublicTests" time="5.002">
      <error>java.lang.Exception: test timed out after 5000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at harrypotter.tests.M1PublicTests.testFirstTaskMapPotionRandomlyChosen(M1PublicTests.java:759)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassIsSubClassChampionCell" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableTaskPotions" classname="harrypotter.tests.M1PublicTests" time="0.005"/>
    <testcase name="testInstanceVariableWizardLocationSetter" classname="harrypotter.tests.M1PublicTests" time="0.021"/>
    <testcase name="testInstanceVariableTournamentSpells" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testClassImplementsInterfaceGryffindorWizard" classname="harrypotter.tests.M1PublicTests" time="0.1">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at harrypotter.tests.M1PublicTests.testClassImplementsInterface(M1PublicTests.java:2119)&#13;
	at harrypotter.tests.M1PublicTests.testClassImplementsInterfaceGryffindorWizard(M1PublicTests.java:25)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testConstructorCollectible" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testInstanceVariableWizardTraitCooldownSetter" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testSecondConstructorWizard" classname="harrypotter.tests.M1PublicTests" time="0.102">
      <error>java.lang.Exception: test timed out after 100 milliseconds&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertFalse(Assert.java:64)&#13;
	at harrypotter.tests.M1PublicTests.testConstructorExists(M1PublicTests.java:2083)&#13;
	at harrypotter.tests.M1PublicTests.testSecondConstructorWizard(M1PublicTests.java:1411)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableHpObstacleSetter" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testInstanceVariableWizardDefaultHp" classname="harrypotter.tests.M1PublicTests" time="0.012"/>
    <testcase name="testInstanceVariableWizardDefaultIp" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testConstructorPhysicalObstacle" classname="harrypotter.tests.M1PublicTests" time="0.007"/>
    <testcase name="testConstructorChampionCell" classname="harrypotter.tests.M1PublicTests" time="0.012"/>
    <testcase name="testInstanceVariableCollectible" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testLoadSpellsMethod" classname="harrypotter.tests.M1PublicTests" time="0.104">
      <failure>java.lang.AssertionError: Failed to create a new instance of the Tournment class.
An Exception was raised: java.lang.NullPointerException&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at harrypotter.tests.M1PublicTests.testLoadSpellsMethod(M1PublicTests.java:1288)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testInstanceVariableTaskMapGetter" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testClassIsSubClassRelocatingSpell" classname="harrypotter.tests.M1PublicTests" time="0.001"/>
    <testcase name="testThirdTaskMapPotionRandomlyChosen" classname="harrypotter.tests.M1PublicTests" time="5.002">
      <error>java.lang.Exception: test timed out after 5000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.ThirdTask.&lt;init&gt;(ThirdTask.java:12)&#13;
	at harrypotter.tests.M1PublicTests.testThirdTaskMapPotionRandomlyChosen(M1PublicTests.java:1794)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testFirstTaskMapChampionLocation" classname="harrypotter.tests.M1PublicTests" time="1.0">
      <error>java.lang.Exception: test timed out after 1000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.FirstTask.&lt;init&gt;(FirstTask.java:13)&#13;
	at harrypotter.tests.M1PublicTests.testFirstTaskMapChampionLocation(M1PublicTests.java:617)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableHufflepuffWizardInherited" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testConstructorTournament" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableSlytherinWizardTraitDiretion" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testInstanceVariableSlytherinWizardTraitDiretionGetter" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testInstanceVariablesGryffindorWizardInherited" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testSecondTaskMapMerpersonDmgHpRandom" classname="harrypotter.tests.M1PublicTests" time="5.001">
      <error>java.lang.Exception: test timed out after 5000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.SecondTask.&lt;init&gt;(SecondTask.java:11)&#13;
	at harrypotter.tests.M1PublicTests.testSecondTaskMapMerpersonDmgHpRandom(M1PublicTests.java:1429)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassIsSubClassEmptyCell" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testThirdTaskReadMap" classname="harrypotter.tests.M1PublicTests" time="2.001">
      <error>java.lang.Exception: test timed out after 2000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.ThirdTask.&lt;init&gt;(ThirdTask.java:12)&#13;
	at harrypotter.tests.M1PublicTests.testThirdTaskReadMap(M1PublicTests.java:1864)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testInstanceVariableTaskMapSetter" classname="harrypotter.tests.M1PublicTests" time="0.002"/>
    <testcase name="testInstanceVariableWizardSpellsGetter" classname="harrypotter.tests.M1PublicTests" time="0.003"/>
    <testcase name="testInstanceVariableTaskChampionsGetter" classname="harrypotter.tests.M1PublicTests" time="0.006"/>
    <testcase name="testClassIsSubClassCollectibleCell" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testInstanceVariableSpellCoolDownGetter" classname="harrypotter.tests.M1PublicTests" time="0.007"/>
    <testcase name="testInstanceVariableHpObstacle" classname="harrypotter.tests.M1PublicTests" time="0.008"/>
    <testcase name="testInstanceVariableCollectibleGetter" classname="harrypotter.tests.M1PublicTests" time="0.0"/>
    <testcase name="testInstanceVariableTaskTraitPotionsGetter" classname="harrypotter.tests.M1PublicTests" time="0.004"/>
    <testcase name="testThirdTaskMapPotionCount" classname="harrypotter.tests.M1PublicTests" time="2.001">
      <error>java.lang.Exception: test timed out after 2000 milliseconds&#13;
	at harrypotter.model.tournament.Task.loadPotions(Task.java:102)&#13;
	at harrypotter.model.tournament.Task.&lt;init&gt;(Task.java:55)&#13;
	at harrypotter.model.tournament.ThirdTask.&lt;init&gt;(ThirdTask.java:12)&#13;
	at harrypotter.tests.M1PublicTests.testThirdTaskMapPotionCount(M1PublicTests.java:1755)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:483)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
</testrun>
